
'''
1. Напишите программу, которая считывает содержимое текстового файла и
вычисляет среднюю длину предложения, среднюю длину слова, наиболее
короткое слово в этом файле. Слова в файле разделены пробелами.
Предложения разделены точками. Реализация должна быть основана на
принципах ООП (объектно-ориентированное программирование)
'''

import re


class MainApp():

# функция инициализации - здесь считываем текст, и разбиваем по предложениям и словам
    def __init__(self):
        filename = "text.txt"                                        # Имя файла
        f = open(filename, "r", encoding="utf-8")                    # encoding="utf-8" для кириллицы
        text = f.read()                                              # Считываем файл
        self.sentences = list(filter(None, re.split(r'[.]', text)))  # Разбиваем текст на предложения
        self.words = []                                              # Задаем список слов
        for sent in self.sentences:                                  # Проходим по всем предложениям
            splited = re.split(r'[ ]', sent)
            words = list(filter(None, splited))                      # Разбиваем предложения на слова
            for word in words:                                       # Проходим по всем словам
                self.words.append(word.replace(",","").lower())      # Добавляем слово к списку слов self.words
        f.close()

# Чтобы найти среднюю длину предложений в тексте, нужно просуммировать длины всех предложений,
# затем посчитать их количество, а далее поделить найденную сумму на количество предложений
    def Avg_length_of_sentences(self, sentences):                    # sentences это
        sum = 0                                                      # Задаем общую длину всех предложений (сумматор)
        for sentence in sentences:                                   # Проходим по всем предложениям
            sum += int(len(sentence))                                # Суммируем общую длину всех предложений
        num_of_sentences = len(sentences)                            # Количество предложений - это количество элементов в писке с предложениями s
        result = round(sum / num_of_sentences)                       # Средняя длина предложений - отношение общей длины всех предложений к количеству предложений
        print('Средняя длина предложения в тесте: ', result, 'символа')


# Чтобы найти среднюю длину слова в тексте, нужно просуммировать длины всех слов,
# затем посчитать их количество, а далее поделить найденную сумму на количество слов
    def Avg_length_of_words(self, words):                            # words это слов из __init__
        sum = 0                                                      # Задаем общую длину всех слов (сумматор)
        for word in words:                                           # Проходим по всем словам
            sum += int(len(word))                                    # Прибавляем очередную длину слова
        num_of_words = len(words)                                    # Количество слов - это количество элементов в писке с предложениями s
        result = round(sum / num_of_words)                           # Средняя длина слов - отношение общей длины всех слов к количеству слов
        print('Средняя длина слова в тесте: ', result, 'символов')


# Чтобы найти среднюю длину слова в тексте, нужно просуммировать длины всех слов,
    def Shortest_word(self, words):                                  # words это слов из __init__
        sorted_words = sorted(words, key=len)                        # Используем метод sorted для сортировки списка слов по длине
        print('Кратчайшее слово:', sorted_words[0])                  # И выводим кратчайшее слово (нулевой элемент списка)


if __name__ == "__main__":
    app = MainApp()
    app.Avg_length_of_sentences(app.sentences)                       # Передаем в качестве аргумента sentences список предложений self.sentences, создаваемый при инициализации init
    app.Avg_length_of_words(app.words)                               # Передаем в качестве аргумента words список предложений self.words, создаваемый при инициализации init
    app.Shortest_word(app.words)                                     # Передаем в качестве аргумента words список предложений self.words, создаваемый при инициализации init
